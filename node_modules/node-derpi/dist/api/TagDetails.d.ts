import { Tag } from './Tag';
import { TagCollection } from '../util/TagCollection';
/**
 * Represents some basic details about a given tag
 *
 * @export
 * @class TagDetails
 */
export declare class TagDetails {
    /**
     * The ID of this tag
     *
     * @readonly
     * @type {number}
     * @memberof TagDetails
     */
    readonly id: number;
    /**
     * The name of this tag
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly name: string;
    /**
     * The sluggified name of this tag
     *
     * @readonly
     * @see Helpers#sluggify
     * @type {string}
     * @memberof TagDetails
     */
    readonly slug: string;
    /**
     * The description of this tag
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly description: string;
    /**
     * The number of images on this tag
     *
     * @readonly
     * @type {number}
     * @memberof TagDetails
     */
    readonly imageCount: number;
    /**
     * The namespace this tag is in (part before the colon)
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly namespace: string;
    /**
     * The name of the tag in its namespace (part after the colon)
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly nameInNamespace: string;
    /**
     * The category of tags this tag is in
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly category: string;
    /**
     * The image used for spoilering images with this tag
     *
     * @readonly
     * @type {string}
     * @memberof TagDetails
     */
    readonly spoilerImage: string;
    /**
     * The internal tag IDs for tags implied by this tag
     *
     * @readonly
     * @private
     * @type {number[]}
     * @memberof TagDetails
     */
    private readonly _impliedTags;
    /**
     * The internal tag ID for the tag this tag is aliased to, if any
     *
     * @readonly
     * @private
     * @type {number}
     * @memberof TagDetails
     */
    private readonly _aliasedTo;
    /**
     * Gets a list of tags implied by this tag
     *
     * @returns {Promise<TagCollection>} A Promise wrapping a TagCollection of implied tags
     * @memberof TagDetails
     */
    impliedTags(): Promise<TagCollection>;
    /**
     * Gets the tag this tag is an alias of, if it exists
     *
     * @returns {(Promise<Tag | null>)} The aliased tag, or null if none exists
     * @memberof TagDetails
     */
    aliasedTo(): Promise<Tag | null>;
}
